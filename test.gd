#!/usr/bin/env -S godot -s

# godot --headless -s test.gd

extends SceneTree

const messages = preload("res://proto/compiled/protoc-gen-godo/example/test_pb.gd")

class TestProtobufEncoder:
  static func run_tests():
    TestProtobufEncoder.test_message_encoding()
    TestProtobufEncoder.test_message_decoding()
    TestProtobufEncoder.test_additional_things()

  static func test_message_encoding():
    assert(messages.TestMessage.new({ "m_int32": 123 }).encode() == PackedByteArray([0x08, 0x7B]))
    assert(messages.TestMessage.new({ "m_big_int32": 67890 }).encode() == PackedByteArray([0xC8, 0x83, 0x06, 0xB2, 0x92, 0x04]))
    assert(messages.TestMessage.new({ "m_int32": -123 }).encode() == PackedByteArray([0x08, 0x85, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01]))
    assert(messages.TestMessage.new({ "m_int64": 123 }).encode() == PackedByteArray([0x10, 0x7B]))
    assert(messages.TestMessage.new({ "m_int64": -123 }).encode() == PackedByteArray([0x10, 0x85, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01]))
    assert(messages.TestMessage.new({ "m_float": 123.456 }).encode() == PackedByteArray([0x1D, 0x79, 0xE9, 0xF6, 0x42]))
    assert(messages.TestMessage.new({ "m_float": -123.456 }).encode() == PackedByteArray([0x1D, 0x79, 0xE9, 0xF6, 0xC2]))
    assert(messages.TestMessage.new({ "m_double": 123.456 }).encode() == PackedByteArray([0x21, 0x77, 0xBE, 0x9F, 0x1A, 0x2F, 0xDD, 0x5E, 0x40]))
    assert(messages.TestMessage.new({ "m_double": -123.456 }).encode() == PackedByteArray([0x21, 0x77, 0xBE, 0x9F, 0x1A, 0x2F, 0xDD, 0x5E, 0xC0]))
    assert(messages.TestMessage.new({ "m_uint32": 123 }).encode() == PackedByteArray([0x28, 0x7B]))
    assert(messages.TestMessage.new({ "m_uint64": 123 }).encode() == PackedByteArray([0x30, 0x7B]))
    assert(messages.TestMessage.new({ "m_sint32": 123 }).encode() == PackedByteArray([0x38, 0xF6, 0x01]))
    assert(messages.TestMessage.new({ "m_sint32": -123 }).encode() == PackedByteArray([0x38, 0xF5, 0x01]))
    assert(messages.TestMessage.new({ "m_sint64": 123 }).encode() == PackedByteArray([0x40, 0xF6, 0x01]))
    assert(messages.TestMessage.new({ "m_sint64": -123 }).encode() == PackedByteArray([0x40, 0xF5, 0x01]))
    assert(messages.TestMessage.new({ "m_fixed32": 123 }).encode() == PackedByteArray([0x4D, 0x7B, 0x00, 0x00, 0x00]))
    assert(messages.TestMessage.new({ "m_sfixed32": 123 }).encode() == PackedByteArray([0x5D, 0x7B, 0x00, 0x00, 0x00]))
    assert(messages.TestMessage.new({ "m_sfixed32": -123 }).encode() == PackedByteArray([0x5D, 0x85, 0xFF, 0xFF, 0xFF]))
    assert(messages.TestMessage.new({ "m_fixed64": 123 }).encode() == PackedByteArray([0x51, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    assert(messages.TestMessage.new({ "m_sfixed64": 123 }).encode() == PackedByteArray([0x61, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    assert(messages.TestMessage.new({ "m_sfixed64": -123 }).encode() == PackedByteArray([0x61, 0x85, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]))
    assert(messages.TestMessage.new({ "m_bool": false }).encode() == PackedByteArray([0x68, 0x00]))
    assert(messages.TestMessage.new({ "m_bool": true }).encode() == PackedByteArray([0x68, 0x01]))
    assert(messages.TestMessage.new({ "m_bytes": PackedByteArray([0x01, 0x02, 0x03]) }).encode() == PackedByteArray([0x72, 0x03, 0x01, 0x02, 0x03]))
    assert(messages.TestMessage.new({ "m_string": "Test String!" }).encode() == PackedByteArray([0x7A, 0x0C, 0x54, 0x65, 0x73, 0x74, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x21]))
    assert(messages.TestMessage.new({ "m_sub_message": { "m_int32": 123 } }).encode() == PackedByteArray([0x82, 0x01, 0x02, 0x08, 0x7B]))
    assert(messages.TestMessage.new({ "m_mapped": { "a": 1, "b": 2, "c": 3 } }).encode() == PackedByteArray([
      0x8A, 0x01, 0x05, 0x0A, 0x01, 0x61, 0x10, 0x01,
      0x8A, 0x01, 0x05, 0x0A, 0x01, 0x62, 0x10, 0x02,
      0x8A, 0x01, 0x05, 0x0A, 0x01, 0x63, 0x10, 0x03
    ]))
    assert(messages.TestMessage.new({ "m_mapped_sub": { "a": { "m_int32": 1 }, "b": messages.SubMessage.new({ "m_int32": 2 }) } }).encode() == PackedByteArray([
      0x92, 0x01, 0x07, 0x0A, 0x01, 0x61, 0x12, 0x02, 0x08, 0x01,
      0x92, 0x01, 0x07, 0x0A, 0x01, 0x62, 0x12, 0x02, 0x08, 0x02
    ]))
    assert(messages.TestMessage.new({ "r_int32": [ 1, 2, 3 ] }).encode() == PackedByteArray([0x9A, 0x01, 0x03, 0x01, 0x02, 0x03]))
    assert(messages.TestMessage.new({ "m_int32": 123, "m_int64": 456, "m_fixed64": 789 }).encode() == PackedByteArray([0x08, 0x7B, 0x10, 0xC8, 0x03, 0x51, 0x15, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    assert(messages.TestMessage.new({ "m_enum": messages.TestEnum.FIRST }).encode() == PackedByteArray([0xA0, 0x01, 0x01]))
    assert(messages.TestMessage.new({ "some_int32": { 'case': 'oneof_int32_1', 'value': 123 } }).encode() == PackedByteArray([0xF0, 0x01, 0x7B]))
    assert(messages.TestMessage.new({ "some_int32": { 'case': 'oneof_int32_2', 'value': 123 } }).encode() == PackedByteArray([0xF8, 0x01, 0x7B]))
    assert(messages.TestMessage.new({ "some_int32": { 'case': 'oneof_int32_3', 'value': 123 } }).encode() == PackedByteArray([0x80, 0x02, 0x7B]))

  static func test_message_decoding():
    assert(messages.TestMessage.from_bytes([0x08, 0x7B]).encode() == PackedByteArray([0x08, 0x7B]))
    assert(messages.TestMessage.from_bytes(PackedByteArray([0x08, 0x7B])).fields['m_int32'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0xC8, 0x83, 0x06, 0xB2, 0x92, 0x04]).encode() == PackedByteArray([0xC8, 0x83, 0x06, 0xB2, 0x92, 0x04]))
    assert(messages.TestMessage.from_bytes(PackedByteArray([0xC8, 0x83, 0x06, 0xB2, 0x92, 0x04])).fields['m_big_int32'].get_value() == 67890)
    assert(messages.TestMessage.from_bytes([0x08, 0x85, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01]).encode() == PackedByteArray([0x08, 0x85, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01]))
    assert(messages.TestMessage.from_bytes(PackedByteArray([0x08, 0x85, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01])).fields['m_int32'].get_value() == -123)
    assert(messages.TestMessage.from_bytes([0x10, 0x7B]).encode() == PackedByteArray([0x10, 0x7B]))
    assert(messages.TestMessage.from_bytes(PackedByteArray([0x10, 0x7B])).fields['m_int64'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0x10, 0x85, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01]).encode() == PackedByteArray([0x10, 0x85, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01]))
    assert(messages.TestMessage.from_bytes(PackedByteArray([0x10, 0x85, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01])).fields['m_int64'].get_value() == -123)
    assert(messages.TestMessage.from_bytes([0x1D, 0x79, 0xE9, 0xF6, 0x42]).encode() == PackedByteArray([0x1D, 0x79, 0xE9, 0xF6, 0x42]))
    var float_value = messages.TestMessage.from_bytes(PackedByteArray([0x1D, 0x79, 0xE9, 0xF6, 0x42])).fields['m_float'].get_value()
    assert(123.457 > float_value and float_value >= 123.456) # Floats decode imprecisely beyond their initial precision
    assert(messages.TestMessage.from_bytes([0x1D, 0x79, 0xE9, 0xF6, 0xC2]).encode() == PackedByteArray([0x1D, 0x79, 0xE9, 0xF6, 0xC2]))
    float_value = messages.TestMessage.from_bytes(PackedByteArray([0x1D, 0x79, 0xE9, 0xF6, 0xC2])).fields['m_float'].get_value()
    assert(-123.457 <= float_value and float_value < -123.456) # Floats decode imprecisely beyond their initial precision
    assert(messages.TestMessage.from_bytes([0x21, 0x77, 0xBE, 0x9F, 0x1A, 0x2F, 0xDD, 0x5E, 0x40]).encode() == PackedByteArray([0x21, 0x77, 0xBE, 0x9F, 0x1A, 0x2F, 0xDD, 0x5E, 0x40]))
    assert(messages.TestMessage.from_bytes([0x21, 0x77, 0xBE, 0x9F, 0x1A, 0x2F, 0xDD, 0x5E, 0x40]).fields['m_double'].get_value() == 123.456)
    assert(messages.TestMessage.from_bytes([0x21, 0x77, 0xBE, 0x9F, 0x1A, 0x2F, 0xDD, 0x5E, 0xC0]).encode() == PackedByteArray([0x21, 0x77, 0xBE, 0x9F, 0x1A, 0x2F, 0xDD, 0x5E, 0xC0]))
    assert(messages.TestMessage.from_bytes([0x21, 0x77, 0xBE, 0x9F, 0x1A, 0x2F, 0xDD, 0x5E, 0xC0]).fields['m_double'].get_value() == -123.456)
    assert(messages.TestMessage.from_bytes([0x28, 0x7B]).encode() == PackedByteArray([0x28, 0x7B]))
    assert(messages.TestMessage.from_bytes([0x28, 0x7B]).fields['m_uint32'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0x30, 0x7B]).encode() == PackedByteArray([0x30, 0x7B]))
    assert(messages.TestMessage.from_bytes([0x30, 0x7B]).fields['m_uint64'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0x38, 0xF6, 0x01]).encode() == PackedByteArray([0x38, 0xF6, 0x01]))
    assert(messages.TestMessage.from_bytes([0x38, 0xF6, 0x01]).fields['m_sint32'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0x38, 0xF5, 0x01]).encode() == PackedByteArray([0x38, 0xF5, 0x01]))
    assert(messages.TestMessage.from_bytes([0x38, 0xF5, 0x01]).fields['m_sint32'].get_value() == -123)
    assert(messages.TestMessage.from_bytes([0x40, 0xF6, 0x01]).encode() == PackedByteArray([0x40, 0xF6, 0x01]))
    assert(messages.TestMessage.from_bytes([0x40, 0xF6, 0x01]).fields['m_sint64'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0x40, 0xF5, 0x01]).encode() == PackedByteArray([0x40, 0xF5, 0x01]))
    assert(messages.TestMessage.from_bytes([0x40, 0xF5, 0x01]).fields['m_sint64'].get_value() == -123)
    assert(messages.TestMessage.from_bytes([0x4D, 0x7B, 0x00, 0x00, 0x00]).encode() == PackedByteArray([0x4D, 0x7B, 0x00, 0x00, 0x00]))
    assert(messages.TestMessage.from_bytes([0x4D, 0x7B, 0x00, 0x00, 0x00]).fields['m_fixed32'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0x5D, 0x7B, 0x00, 0x00, 0x00]).encode() == PackedByteArray([0x5D, 0x7B, 0x00, 0x00, 0x00]))
    assert(messages.TestMessage.from_bytes([0x5D, 0x7B, 0x00, 0x00, 0x00]).fields['m_sfixed32'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0x5D, 0x85, 0xFF, 0xFF, 0xFF]).encode() == PackedByteArray([0x5D, 0x85, 0xFF, 0xFF, 0xFF]))
    assert(messages.TestMessage.from_bytes([0x5D, 0x85, 0xFF, 0xFF, 0xFF]).fields['m_sfixed32'].get_value() == -123)
    assert(messages.TestMessage.from_bytes([0x51, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]).encode() == PackedByteArray([0x51, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    assert(messages.TestMessage.from_bytes([0x51, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]).fields['m_fixed64'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0x61, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]).encode() == PackedByteArray([0x61, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    assert(messages.TestMessage.from_bytes([0x61, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]).fields['m_sfixed64'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0x61, 0x85, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]).encode() == PackedByteArray([0x61, 0x85, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]))
    assert(messages.TestMessage.from_bytes([0x61, 0x85, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]).fields['m_sfixed64'].get_value() == -123)
    assert(messages.TestMessage.from_bytes([0x68, 0x00]).encode() == PackedByteArray([0x68, 0x00]))
    assert(messages.TestMessage.from_bytes([0x5D, 0x7B, 0x00, 0x00, 0x00]).fields['m_sfixed32'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0x68, 0x01]).encode() == PackedByteArray([0x68, 0x01]))
    assert(messages.TestMessage.from_bytes([0x68, 0x01]).fields['m_bool'].get_value() == true)
    assert(messages.TestMessage.from_bytes([0x72, 0x03, 0x01, 0x02, 0x03]).encode() == PackedByteArray([0x72, 0x03, 0x01, 0x02, 0x03]))
    assert(messages.TestMessage.from_bytes([0x72, 0x03, 0x01, 0x02, 0x03]).fields['m_bytes'].get_value() == PackedByteArray([0x01, 0x02, 0x03]))
    assert(messages.TestMessage.from_bytes([0x7A, 0x0C, 0x54, 0x65, 0x73, 0x74, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x21]).encode() == PackedByteArray([0x7A, 0x0C, 0x54, 0x65, 0x73, 0x74, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x21]))
    assert(messages.TestMessage.from_bytes([0x7A, 0x0C, 0x54, 0x65, 0x73, 0x74, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x21]).fields['m_string'].get_value() == "Test String!")
    assert(messages.TestMessage.from_bytes([0x82, 0x01, 0x02, 0x08, 0x7B]).encode() == PackedByteArray([0x82, 0x01, 0x02, 0x08, 0x7B]))
    assert(messages.TestMessage.from_bytes([0x82, 0x01, 0x02, 0x08, 0x7B]).fields['m_sub_message'].get_value().fields['m_int32'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([
      0x8A, 0x01, 0x05, 0x0A, 0x01, 0x61, 0x10, 0x01,
      0x8A, 0x01, 0x05, 0x0A, 0x01, 0x62, 0x10, 0x02,
      0x8A, 0x01, 0x05, 0x0A, 0x01, 0x63, 0x10, 0x03
    ]).encode() == PackedByteArray([
      0x8A, 0x01, 0x05, 0x0A, 0x01, 0x61, 0x10, 0x01,
      0x8A, 0x01, 0x05, 0x0A, 0x01, 0x62, 0x10, 0x02,
      0x8A, 0x01, 0x05, 0x0A, 0x01, 0x63, 0x10, 0x03
    ]))
    assert(messages.TestMessage.from_bytes([
      0x8A, 0x01, 0x05, 0x0A, 0x01, 0x61, 0x10, 0x01,
      0x8A, 0x01, 0x05, 0x0A, 0x01, 0x62, 0x10, 0x02,
      0x8A, 0x01, 0x05, 0x0A, 0x01, 0x63, 0x10, 0x03
    ]).fields['m_mapped'].get_value() == { "a": 1, "b": 2, "c": 3 })
    assert(messages.TestMessage.from_bytes([
      0x92, 0x01, 0x07, 0x0A, 0x01, 0x61, 0x12, 0x02, 0x08, 0x01,
      0x92, 0x01, 0x07, 0x0A, 0x01, 0x62, 0x12, 0x02, 0x08, 0x02
    ]).encode() == PackedByteArray([
      0x92, 0x01, 0x07, 0x0A, 0x01, 0x61, 0x12, 0x02, 0x08, 0x01,
      0x92, 0x01, 0x07, 0x0A, 0x01, 0x62, 0x12, 0x02, 0x08, 0x02
    ]))
    var sub_map = messages.TestMessage.from_bytes([
      0x92, 0x01, 0x07, 0x0A, 0x01, 0x61, 0x12, 0x02, 0x08, 0x01,
      0x92, 0x01, 0x07, 0x0A, 0x01, 0x62, 0x12, 0x02, 0x08, 0x02
    ]).fields['m_mapped_sub'].get_value()
    assert(sub_map['a'].fields['m_int32'].get_value() == 1)
    assert(sub_map['b'].fields['m_int32'].get_value() == 2)
    assert(messages.TestMessage.from_bytes([0x9A, 0x01, 0x03, 0x01, 0x02, 0x03]).encode() == PackedByteArray([0x9A, 0x01, 0x03, 0x01, 0x02, 0x03]))
    assert(messages.TestMessage.from_bytes([0x9A, 0x01, 0x03, 0x01, 0x02, 0x03]).fields['r_int32'].get_value() == [ 1, 2, 3 ])
    assert(messages.TestMessage.from_bytes([0x08, 0x7B, 0x10, 0xC8, 0x03, 0x51, 0x15, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]).encode() == PackedByteArray([0x08, 0x7B, 0x10, 0xC8, 0x03, 0x51, 0x15, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    var mixed_message = messages.TestMessage.from_bytes([0x08, 0x7B, 0x10, 0xC8, 0x03, 0x51, 0x15, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    assert(mixed_message.fields['m_int32'].get_value() == 123)
    assert(mixed_message.fields['m_int64'].get_value() == 456)
    assert(mixed_message.fields['m_fixed64'].get_value() == 789)
    assert(messages.TestMessage.from_bytes([0xA0, 0x01, 0x01]).encode() == PackedByteArray([0xA0, 0x01, 0x01]))
    assert(messages.TestMessage.from_bytes([0xA0, 0x01, 0x01]).fields['m_enum'].get_value() == messages.TestEnum.FIRST)
    assert(messages.TestMessage.from_bytes([0xF0, 0x01, 0x7B]).encode() == PackedByteArray([0xF0, 0x01, 0x7B]))
    assert(messages.TestMessage.from_bytes([0xF0, 0x01, 0x7B]).fields['oneof_int32_1'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0xF8, 0x01, 0x7B]).encode() == PackedByteArray([0xF8, 0x01, 0x7B]))
    assert(messages.TestMessage.from_bytes([0xF8, 0x01, 0x7B]).fields['oneof_int32_2'].get_value() == 123)
    assert(messages.TestMessage.from_bytes([0x80, 0x02, 0x7B]).encode() == PackedByteArray([0x80, 0x02, 0x7B]))
    assert(messages.TestMessage.from_bytes([0x80, 0x02, 0x7B]).fields['oneof_int32_3'].get_value() == 123)

  static func test_additional_things():
    # Make sure that assigning a new oneof field overwrites the last and only the last one set gets encoded
    var message = messages.TestMessage.new({ "some_int32": { 'case': 'oneof_int32_1', 'value': 123 } })
    message.set_field('some_int32', { 'case': 'oneof_int32_2', 'value': 123 })
    assert(message.encode() == PackedByteArray([0xF8, 0x01, 0x7B]))

func _init():
  TestProtobufEncoder.run_tests()
  quit()
