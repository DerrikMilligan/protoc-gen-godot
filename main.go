package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}

			generateFile(gen, f)
		}
		return nil
	})
}

func getGodotFieldType(field *protogen.Field) string {
	switch field.Desc.Kind() {
	case protoreflect.BoolKind:
		return "bool"
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind:
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind:
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		return "int"
	case protoreflect.FloatKind:
	case protoreflect.DoubleKind:
		return "float"
	case protoreflect.StringKind:
		return "String"
	case protoreflect.BytesKind:
		return "PoolByteArray"
	case protoreflect.MessageKind:
		return string(field.Desc.Message().FullName().Name())
	// Maybe this would be handled differently?
	case protoreflect.EnumKind:
		return string(field.Desc.Enum().FullName().Name())
		// return "int"
	}
	return "Object"
}

func getGodotDefaultValue(field *protogen.Field) string {
	switch field.Desc.Kind() {
	case protoreflect.BoolKind:
		return "false"
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind:
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind:
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		return "0"
	case protoreflect.FloatKind:
	case protoreflect.DoubleKind:
		return "0.0"
	case protoreflect.StringKind:
		return "\"\""
	case protoreflect.BytesKind:
		return "PackedByteArray()"
	case protoreflect.MessageKind:
		return "null"
	// Maybe this would be handled differently?
	case protoreflect.EnumKind:
		return "0"
	}
	return "null"
}

// generateFile generates a _ascii.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + ".pb.gd"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("# Code generated by protoc-gen-godot. DO NOT EDIT.")
	g.P()

	// Generate the enum definitions
	for _, enum := range file.Enums {
		g.P("enum ", enum.GoIdent.GoName, " {")
		for _, value := range enum.Values {
			g.P("\t", value.Desc.FullName().Name(), " = ", value.Desc.Number(), ",")
		}
		g.P("}")
		g.P()
	}

	for _, msg := range file.Messages {
		g.P("class ", msg.GoIdent.GoName, ":")
		for _, field := range msg.Fields {
			// g.P("\tvar ", field.GoName, ": ", field.GoIdent.GoName)
			g.P("\tvar ", field.GoName, ": ", getGodotFieldType(field), " = ", getGodotDefaultValue(field))
		}
		g.P()
	}

	// return g
}
